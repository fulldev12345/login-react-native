{"ast":null,"code":"import { getItemCount } from \"@react-stately/collections\";\nimport { useSelectableList, useSelectableItem } from \"@react-aria/selection\";\nimport { useLabel } from \"@react-aria/label\";\nimport { useFocusWithin, isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps, useId, isMac, isWebKit, useSlotId } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nexport var listData = new WeakMap();\nfunction $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(key) {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n  return '' + key;\n}\nexport function getItemId(state, itemKey) {\n  var data = listData.get(state);\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n  return data.id + \"-option-\" + $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(itemKey);\n}\nexport function useListBox(props, state, ref) {\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  var _useSelectableList = useSelectableList(_babelRuntimeHelpersEsmExtends({}, props, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys\n    })),\n    listProps = _useSelectableList.listProps;\n  var _useFocusWithin = useFocusWithin({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _useFocusWithin.focusWithinProps;\n  var id = useId(props.id);\n  listData.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n  var _useLabel = useLabel(_babelRuntimeHelpersEsmExtends({}, props, {\n      id: id,\n      labelElementType: 'span'\n    })),\n    labelProps = _useLabel.labelProps,\n    fieldProps = _useLabel.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _babelRuntimeHelpersEsmExtends({\n      role: 'listbox'\n    }, mergeProps(fieldProps, listProps)))\n  };\n}\nexport function useOption(props, state, ref) {\n  var _props$isDisabled, _props$isSelected, _props$shouldSelectOn, _props$shouldFocusOnH, _props$shouldUseVirtu, _props$isVirtualized;\n  var key = props.key;\n  var data = listData.get(state);\n  var isDisabled = (_props$isDisabled = props.isDisabled) != null ? _props$isDisabled : state.disabledKeys.has(key);\n  var isSelected = (_props$isSelected = props.isSelected) != null ? _props$isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n  var shouldSelectOnPressUp = (_props$shouldSelectOn = props.shouldSelectOnPressUp) != null ? _props$shouldSelectOn : data.shouldSelectOnPressUp;\n  var shouldFocusOnHover = (_props$shouldFocusOnH = props.shouldFocusOnHover) != null ? _props$shouldFocusOnH : data.shouldFocusOnHover;\n  var shouldUseVirtualFocus = (_props$shouldUseVirtu = props.shouldUseVirtualFocus) != null ? _props$shouldUseVirtu : data.shouldUseVirtualFocus;\n  var isVirtualized = (_props$isVirtualized = props.isVirtualized) != null ? _props$isVirtualized : data.isVirtualized;\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n  var _useSelectableItem = useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus\n    }),\n    itemProps = _useSelectableItem.itemProps;\n  var _usePress = usePress(_babelRuntimeHelpersEsmExtends({}, itemProps, {\n      isDisabled: isDisabled,\n      preventFocusOnPress: shouldUseVirtualFocus\n    })),\n    pressProps = _usePress.pressProps,\n    isPressed = _usePress.isPressed;\n  var _useHover = useHover({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }),\n    hoverProps = _useHover.hoverProps;\n  return {\n    optionProps: _babelRuntimeHelpersEsmExtends({}, optionProps, mergeProps(pressProps, hoverProps), {\n      id: getItemId(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\nexport function useListBoxSection(props) {\n  var heading = props.heading,\n    ariaLabel = props['aria-label'];\n  var headingId = useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}","map":{"version":3,"names":["listData","WeakMap","$d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey","normalizeKey","key","replace","getItemId","state","itemKey","data","get","Error","id","useListBox","props","ref","domProps","filterDOMProps","labelable","_useSelectableList","useSelectableList","_babelRuntimeHelpersEsmExtends","selectionManager","collection","disabledKeys","listProps","_useFocusWithin","useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","_useLabel","useLabel","labelElementType","labelProps","fieldProps","listBoxProps","mergeProps","selectionMode","role","useOption","_props$isDisabled","_props$isSelected","_props$shouldSelectOn","_props$shouldFocusOnH","_props$shouldUseVirtu","_props$isVirtualized","isDisabled","has","isSelected","isFocused","focusedKey","labelId","useSlotId","descriptionId","optionProps","isMac","isWebKit","getItem","index","getItemCount","_useSelectableItem","useSelectableItem","itemProps","_usePress","usePress","preventFocusOnPress","pressProps","isPressed","_useHover","useHover","onHoverStart","isFocusVisible","setFocused","setFocusedKey","hoverProps","descriptionProps","useListBoxSection","heading","ariaLabel","headingId","headingProps","groupProps","undefined"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\utils.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBox.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useOption.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n\n  let {pressProps, isPressed} = usePress({...itemProps, isDisabled, preventFocusOnPress: shouldUseVirtualFocus});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}