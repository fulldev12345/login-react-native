{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _Input = require(\"../../primitives/Input\");\nvar _Context = require(\"./Context\");\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _utils = require(\"../../../utils\");\nvar _this = this,\n  _jsxFileName = \"/Users/himanshusatija/projects/nativebase-v3/src/components/composites/PinInput/PinInputField.tsx\";\nvar PinInputFiled = function PinInputFiled(_ref, ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n    fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n    pDefaultValue = _ref.defaultValue,\n    props = (0, _objectWithoutProperties2.default)(_ref, [\"fieldIndex\", \"defaultValue\"]);\n  var _React$useContext = _react.default.useContext(_Context.PinInputContext),\n    handleChange = _React$useContext.handleChange,\n    cValue = _React$useContext.value,\n    setRefList = _React$useContext.setRefList,\n    cDefaultValue = _React$useContext.defaultValue,\n    handleMultiValueChange = _React$useContext.handleMultiValueChange,\n    context = (0, _objectWithoutProperties2.default)(_React$useContext, [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"]);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  var defaultValue = pDefaultValue || cDefaultValue;\n  var value = cValue && cValue[fieldIndex];\n  var keyPressHandler = function keyPressHandler(event) {\n    if (_reactNative.Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  var myRef = _react.default.useRef(null);\n  _react.default.useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n  return _react.default.createElement(_Input.Input, (0, _extends2.default)({\n    ref: (0, _utils.mergeRefs)([myRef, ref])\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }));\n};\nvar _default = _react.default.memo(_react.default.forwardRef(PinInputFiled));\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_Input","_Context","_reactNative","_utils","PinInputFiled","_ref","ref","_ref$fieldIndex","fieldIndex","pDefaultValue","defaultValue","props","_objectWithoutProperties2","default","_React$useContext","useContext","PinInputContext","handleChange","cValue","value","setRefList","cDefaultValue","handleMultiValueChange","context","keyPressHandler","event","Platform","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","createElement","Input","_extends2","mergeRefs","onKeyPress","onChangeText","keyboardType","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","memo","forwardRef"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\components\\composites\\PinInput\\PinInputField.tsx"],"sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return (\n    <Input\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}