{"ast":null,"code":"import { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport { getItemCount } from \"@react-stately/collections\";\nimport { useSelectableList, useSelectableItem } from \"@react-aria/selection\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { useOverlayTrigger } from \"@react-aria/overlays\";\nimport { useId, filterDOMProps, mergeProps, useSlotId } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nexport function useMenuTrigger(props, state, ref) {\n  var _props$type = props.type,\n    type = _props$type === void 0 ? 'menu' : _props$type,\n    isDisabled = props.isDisabled;\n  var menuTriggerId = useId();\n  var _useOverlayTrigger = useOverlayTrigger({\n      type: type\n    }, state, ref),\n    triggerProps = _useOverlayTrigger.triggerProps,\n    overlayProps = _useOverlayTrigger.overlayProps;\n  var onKeyDown = function onKeyDown(e) {\n    if (typeof e.isDefaultPrevented === 'function' && e.isDefaultPrevented() || e.defaultPrevented || isDisabled) {\n      return;\n    }\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'ArrowDown':\n        case 'Enter':\n        case ' ':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('last');\n          break;\n      }\n    }\n  };\n  return {\n    menuTriggerProps: _babelRuntimeHelpersEsmExtends({}, triggerProps, {\n      id: menuTriggerId,\n      onPressStart: function onPressStart(e) {\n        if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard') {\n          state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n        }\n      },\n      onPress: function onPress(e) {\n        if (e.pointerType === 'touch') {\n          state.toggle();\n        }\n      },\n      onKeyDown: onKeyDown\n    }),\n    menuProps: _babelRuntimeHelpersEsmExtends({}, overlayProps, {\n      'aria-labelledby': menuTriggerId\n    })\n  };\n}\nexport function useMenu(props, state, ref) {\n  var _props$shouldFocusWra = props.shouldFocusWrap,\n    shouldFocusWrap = _props$shouldFocusWra === void 0 ? true : _props$shouldFocusWra,\n    otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"shouldFocusWrap\"]);\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  var _useSelectableList = useSelectableList(_babelRuntimeHelpersEsmExtends({}, otherProps, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys,\n      shouldFocusWrap: shouldFocusWrap\n    })),\n    listProps = _useSelectableList.listProps;\n  return {\n    menuProps: mergeProps(domProps, _babelRuntimeHelpersEsmExtends({\n      role: 'menu'\n    }, listProps))\n  };\n}\nexport function useMenuItem(props, state, ref) {\n  var isSelected = props.isSelected,\n    isDisabled = props.isDisabled,\n    key = props.key,\n    onClose = props.onClose,\n    closeOnSelect = props.closeOnSelect,\n    isVirtualized = props.isVirtualized,\n    onAction = props.onAction;\n  var role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var keyboardId = useSlotId();\n  var ariaProps = {\n    'aria-disabled': isDisabled,\n    role: role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n  var onKeyDown = function onKeyDown(e) {\n    if (e.repeat) {\n      return;\n    }\n    switch (e.key) {\n      case ' ':\n        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n      case 'Enter':\n        if (!isDisabled && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n    }\n  };\n  var onPressStart = function onPressStart(e) {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n  var onPressUp = function onPressUp(e) {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n      if (onClose && (closeOnSelect != null ? closeOnSelect : state.selectionManager.selectionMode !== 'multiple')) {\n        onClose();\n      }\n    }\n  };\n  var _useSelectableItem = useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: true\n    }),\n    itemProps = _useSelectableItem.itemProps;\n  var _usePress = usePress(mergeProps({\n      onPressStart: onPressStart,\n      onPressUp: onPressUp,\n      onKeyDown: onKeyDown,\n      isDisabled: isDisabled\n    }, itemProps)),\n    pressProps = _usePress.pressProps;\n  var _useHover = useHover({\n      isDisabled: isDisabled,\n      onHoverStart: function onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }),\n    hoverProps = _useHover.hoverProps;\n  return {\n    menuItemProps: _babelRuntimeHelpersEsmExtends({}, ariaProps, mergeProps(pressProps, hoverProps)),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    }\n  };\n}\nexport function useMenuSection(props) {\n  var heading = props.heading,\n    ariaLabel = props['aria-label'];\n  var headingId = useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}","map":{"version":3,"names":["useMenuTrigger","props","state","ref","_props$type","type","isDisabled","menuTriggerId","useId","_useOverlayTrigger","useOverlayTrigger","triggerProps","overlayProps","onKeyDown","e","isDefaultPrevented","defaultPrevented","current","key","preventDefault","stopPropagation","toggle","menuTriggerProps","_babelRuntimeHelpersEsmExtends","id","onPressStart","pointerType","onPress","menuProps","useMenu","_props$shouldFocusWra","shouldFocusWrap","otherProps","_babelRuntimeHelpersEsmObjectWithoutPropertiesLoose","console","warn","domProps","filterDOMProps","labelable","_useSelectableList","useSelectableList","selectionManager","collection","disabledKeys","listProps","mergeProps","role","useMenuItem","isSelected","onClose","closeOnSelect","isVirtualized","onAction","selectionMode","labelId","useSlotId","descriptionId","keyboardId","ariaProps","filter","Boolean","join","undefined","getItem","index","getItemCount","repeat","onPressUp","_useSelectableItem","useSelectableItem","shouldSelectOnPressUp","itemProps","_usePress","usePress","pressProps","_useHover","useHover","onHoverStart","isFocusVisible","setFocused","setFocusedKey","hoverProps","menuItemProps","labelProps","descriptionProps","keyboardShortcutProps","useMenuSection","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuTrigger.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenu.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuItem.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {MenuTriggerState} from '@react-stately/menu';\nimport {useId} from '@react-aria/utils';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\ninterface MenuTriggerAriaProps {\n  /** The type of menu that the menu trigger opens. */\n  type?: 'menu' | 'listbox',\n  /** Whether menu trigger is disabled. */\n  isDisabled?: boolean\n}\n\ninterface MenuTriggerAria {\n  /** Props for the menu trigger element. */\n  menuTriggerProps: AriaButtonProps,\n\n  /** Props for the menu. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu trigger.\n * @param props - Props for the menu trigger.\n * @param state - State for the menu trigger.\n */\nexport function useMenuTrigger(props: MenuTriggerAriaProps, state: MenuTriggerState, ref: RefObject<HTMLElement>): MenuTriggerAria {\n  let {\n    type = 'menu' as MenuTriggerAriaProps['type'],\n    isDisabled\n  } = props;\n\n  let menuTriggerId = useId();\n  let {triggerProps, overlayProps} = useOverlayTrigger({type}, state, ref);\n\n  let onKeyDown = (e) => {\n    if ((typeof e.isDefaultPrevented === 'function' && e.isDefaultPrevented()) || e.defaultPrevented || isDisabled) {\n      return;\n    }\n\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'ArrowDown':\n        case 'Enter':\n        case ' ':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('last');\n          break;\n      }\n    }\n  };\n\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      id: menuTriggerId,\n      onPressStart(e) {\n        // For consistency with native, open the menu on mouse/key down, but touch up.\n        if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard') {\n          // If opened with a screen reader, auto focus the first item.\n          // Otherwise, the menu itself will be focused.\n          state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n        }\n      },\n      onPress(e) {\n        if (e.pointerType === 'touch') {\n          state.toggle();\n        }\n      },\n      onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      'aria-labelledby': menuTriggerId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface MenuAria {\n  /** Props for the menu element. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaMenuOptions<T> extends AriaMenuProps<T> {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {\n      role: 'menu',\n      ...listProps\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {PressEvent} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaMenuItemProps {\n  /** Whether the menu item is disabled. */\n  isDisabled?: boolean,\n\n  /** Whether the menu item is selected. */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key?: Key,\n\n  /** Handler that is called when the menu should close after selecting an item. */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /** Handler that is called when the user activates the item. */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuItemAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    onClose,\n    closeOnSelect,\n    isVirtualized,\n    onAction\n  } = props;\n\n  let role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    'aria-disabled': isDisabled,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Ignore repeating events, which may have started on the menu trigger before moving\n    // focus to the menu item. We want to wait for a second complete key press sequence.\n    if (e.repeat) {\n      return;\n    }\n\n    switch (e.key) {\n      case ' ':\n        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n      case 'Enter':\n        // The Enter key should always close on select, except if overridden.\n        if (!isDisabled && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n\n      // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n      if (onClose && (closeOnSelect ?? state.selectionManager.selectionMode !== 'multiple')) {\n        onClose();\n      }\n    }\n  };\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true\n  });\n\n  let {pressProps} = usePress(mergeProps({onPressStart, onPressUp, onKeyDown, isDisabled}, itemProps));\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(pressProps, hoverProps)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaMenuSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface MenuSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the section.\n */\nexport function useMenuSection(props: AriaMenuSectionProps): MenuSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}