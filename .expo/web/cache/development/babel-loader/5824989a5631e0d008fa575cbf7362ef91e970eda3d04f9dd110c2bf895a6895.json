{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useNavigationState(selector) {\n  var navigation = useNavigation();\n  var _React$useState = React.useState(function () {\n      return selector(navigation.dangerouslyGetState());\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    setResult = _React$useState2[1];\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.dangerouslyGetState());\n}","map":{"version":3,"names":["React","useNavigation","useNavigationState","selector","navigation","_React$useState","useState","dangerouslyGetState","_React$useState2","_slicedToArray","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationState.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP;AASA,eAAe,SAASC,kBAATA,CAA+BC,QAA/B,EAAyD;EACtE,IAAMC,UAAU,GAAGH,aAAa,EAAhC;EAIA,IAAAI,eAAA,GAAsBL,KAAK,CAACM,QAAN,CAAe;MAAA,OACnCH,QAAQ,CAACC,UAAU,CAACG,mBAAX,EAAD,CADY;IAAA,EAAtB;IAAAC,gBAAA,GAAAC,cAAA,CAAAJ,eAAA;IAASK,SAAH,GAAAF,gBAAA;EAKN,IAAMG,WAAW,GAAGX,KAAK,CAACY,MAAN,CAAaT,QAAb,CAApB;EAEAH,KAAK,CAACa,SAAN,CAAgB,YAAM;IACpBF,WAAW,CAACG,OAAZ,GAAsBX,QAAtB;EACD,CAFD;EAIAH,KAAK,CAACa,SAAN,CAAgB,YAAM;IACpB,IAAME,WAAW,GAAGX,UAAU,CAACY,WAAX,CAAuB,OAAvB,EAAiC,UAAAC,CAAD,EAAO;MACzDP,SAAS,CAACC,WAAW,CAACG,OAAZ,CAAoBG,CAAC,CAACC,IAAF,CAAOC,KAA3B,CAAD,CAAT;IACD,CAFmB,CAApB;IAIA,OAAOJ,WAAP;EACD,CAND,EAMG,CAACX,UAAD,CANH;EAQA,OAAOD,QAAQ,CAACC,UAAU,CAACG,mBAAX,EAAD,CAAf;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}