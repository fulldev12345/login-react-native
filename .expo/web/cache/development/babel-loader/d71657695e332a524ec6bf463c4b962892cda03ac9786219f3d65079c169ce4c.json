{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"E:\\\\Login-UI-UX-React-Native\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\createIconSet.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n  var font = _defineProperty({}, fontName, expoAssetId);\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n    var _super = _createSuper(Icon);\n    function Icon() {\n      var _this;\n      _classCallCheck(this, Icon);\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(Font.loadAsync(font));\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n          console.warn(\"\\\"\" + this.props.name + \"\\\" is not a valid icon name for family \\\"\" + fontName + \"\\\"\");\n        }\n        if (!this.state.fontIsLoaded) {\n          return React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 28\n            }\n          });\n        }\n        return React.createElement(RNVIconComponent, _extends({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }\n        }));\n      }\n    }]);\n    return Icon;\n  }(React.Component), _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"names":["Font","React","Text","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","_defineProperty","RNVIconComponent","_a","_React$Component","_inherits","Icon","_super","_createSuper","_this","_classCallCheck","_mounted","state","fontIsLoaded","isLoaded","_createClass","key","value","componentDidMount","_regeneratorRuntime","async","componentDidMount$","_context","prev","next","awrap","loadAsync","setState","stop","Promise","componentWillUnmount","setNativeProps","props","_icon","render","_this2","__DEV__","name","console","warn","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","ref","view","Component","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@expo\\vector-icons\\src\\createIconSet.tsx"],"sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(\n          `\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`\n        );\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}