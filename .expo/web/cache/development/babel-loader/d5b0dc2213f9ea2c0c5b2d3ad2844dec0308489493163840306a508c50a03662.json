{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _Context = require(\"./../hybrid-overlay/Context\");\nvar useColorMode = function useColorMode() {\n  var _React$useContext = _react.default.useContext(_Context.HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexports.useColorMode = useColorMode;\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nfunction useModeManager(initialColorMode, colorModeManager) {\n  var _useState = (0, _react.useState)(initialColorMode),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    colorMode = _useState2[0],\n    setRawMode = _useState2[1];\n  function setColorMode(val) {\n    return _regenerator.default.async(function setColorMode$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n            _context.next = 3;\n            return _regenerator.default.awrap(colorModeManager.set(val));\n          case 3:\n            setRawMode(val);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regenerator.default.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regenerator.default.awrap(colorModeManager.get(initialColorMode));\n              case 2:\n                value = _context2.sent;\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nfunction useAccessibleColors() {\n  var _React$useContext2 = _react.default.useContext(_Context.HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_Context","useColorMode","_React$useContext","default","useContext","HybridContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","_useColorMode","useModeManager","initialColorMode","colorModeManager","_useState","useState","_useState2","_slicedToArray2","setRawMode","setColorMode","val","_regenerator","async","setColorMode$","_context","prev","next","awrap","set","stop","Promise","useEffect","getMode","value","getMode$","_context2","get","sent","useAccessibleColors","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  colorModeManager?: StorageManager\n) {\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  async function setColorMode(val: ColorMode) {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n    setRawMode(val);\n  }\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}