{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState } from \"@react-stately/utils\";\nexport function useToggleState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    isReadOnly = _props.isReadOnly,\n    onChange = _props.onChange;\n  var _useControlledState = useControlledState(props.isSelected, props.defaultSelected || false, function () {}),\n    _useControlledState2 = _slicedToArray(_useControlledState, 2),\n    isSelected = _useControlledState2[0],\n    setSelected = _useControlledState2[1];\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(function (prev) {\n        var newVal = !prev;\n        if (onChange) {\n          onChange(newVal);\n        }\n        return newVal;\n      });\n    }\n  }\n  return {\n    isSelected: isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}","map":{"version":3,"names":["useToggleState","props","_props","isReadOnly","onChange","_useControlledState","useControlledState","isSelected","defaultSelected","_useControlledState2","_slicedToArray","setSelected","updateSelected","value","toggleState","prev","newVal","toggle"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-stately\\toggle\\dist\\packages\\@react-stately\\toggle\\src\\useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n  \n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly, onChange} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, () => {});\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(prev => {\n        let newVal = !prev;\n        if (onChange) {\n          onChange(newVal);\n        }\n        return newVal;\n      });\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"],"mappings":";;OA6BO,SAASA,cAATA,CAAwBC,KAAxB,EAA8D;EAAA,IAAtCA,KAAsC;IAAtCA,KAAsC,GAAjB,EAAiB;EAAA;EACnE,IAAAC,MAAA,GAA6BD,KAA7B;IAAKE,UAAD,GAAAD,MAAA,CAACC,UAAD;IAAaC,QAAA,GAAAF,MAAA,CAAAE,QAAA;EAIjB,IAAAC,mBAAA,GAAgCC,kBAAkB,CAACL,KAAK,CAACM,UAAP,EAAmBN,KAAK,CAACO,eAAN,IAAyB,KAA5C,EAAmD,YAAM,CAAE,CAA3D,CAAlD;IAAAC,oBAAA,GAAAC,cAAA,CAAAL,mBAAA;IAAKE,UAAD,GAAAE,oBAAA;IAAaE,WAAb,GAAAF,oBAAA;EAEJ,SAASG,cAATA,CAAwBC,KAAxB,EAA+B;IAC7B,IAAI,CAACV,UAAL,EAAiB;MACfQ,WAAW,CAACE,KAAD,CAAX;MACA,IAAIT,QAAJ,EAAc;QACZA,QAAQ,CAACS,KAAD,CAAR;MACD;IACF;EACF;EAED,SAASC,WAATA,CAAA,EAAuB;IACrB,IAAI,CAACX,UAAL,EAAiB;MACfQ,WAAW,CAAC,UAAAI,IAAI,EAAI;QAClB,IAAIC,MAAM,GAAG,CAACD,IAAd;QACA,IAAIX,QAAJ,EAAc;UACZA,QAAQ,CAACY,MAAD,CAAR;QACD;QACD,OAAOA,MAAP;MACD,CANU,CAAX;IAOD;EACF;EAED,OAAO;IACLT,UADK,EACLA,UADK;IAELI,WAAW,EAAEC,cAFR;IAGLK,MAAM,EAAEH;EAHH,CAAP;AAKD"},"metadata":{},"sourceType":"module","externalDependencies":[]}