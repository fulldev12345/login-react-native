{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressChange\"];\nimport { usePress } from '@react-native-aria/interactions';\nimport { mergeProps } from '@react-aria/utils';\nexport function useButton(props) {\n  var isDisabled = props.isDisabled,\n    onPress = props.onPress,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _usePress = usePress({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: onPress,\n      isDisabled: isDisabled\n    }),\n    pressProps = _usePress.pressProps,\n    isPressed = _usePress.isPressed;\n  var mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled\n  });\n  return {\n    isPressed: isPressed,\n    buttonProps: mergedProps\n  };\n}","map":{"version":3,"names":["usePress","mergeProps","useButton","props","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","rest","_objectWithoutProperties","_excluded","_usePress","pressProps","isPressed","mergedProps","accessibilityState","disabled","accessibilityRole","buttonProps"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-native-aria\\button\\lib\\module\\useButton.ts"],"sourcesContent":["import { ReactNode } from 'react';\nimport { PressEvents, usePress } from '@react-native-aria/interactions';\nimport { AccessibilityProps, PressableProps } from 'react-native';\nimport { mergeProps } from '@react-aria/utils';\n\ninterface ButtonProps extends PressEvents {\n  /** Whether the button is disabled. */\n  isDisabled?: boolean;\n  /** The content to display in the button. */\n  children?: ReactNode;\n}\n\nexport interface RNAriaButtonProps extends AccessibilityProps, ButtonProps {}\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: PressableProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(props: RNAriaButtonProps): ButtonAria {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    ...rest\n  } = props;\n\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n  });\n\n  const mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled,\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled,\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergedProps,\n  };\n}\n"],"mappings":";;AACA,SAAsBA,QAAtB,QAAsC,iCAAtC;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AAkBA,OAAO,SAASC,SAATA,CAAmBC,KAAnB,EAAyD;EAC9D,IACEC,UADE,GAOAD,KAPJ,CACEC,UADE;IAEFC,OAFE,GAOAF,KAPJ,CAEEE,OAFE;IAGFC,YAHE,GAOAH,KAPJ,CAGEG,YAHE;IAIFC,UAJE,GAOAJ,KAPJ,CAIEI,UAJE;IAKFC,aALE,GAOAL,KAPJ,CAKEK,aALE;IAMCC,IAAA,GAAAC,wBAAA,CACDP,KAPJ,EAAAQ,SAAA;EASA,IAAAC,SAAA,GAAgCZ,QAAQ,CAAC;MACvCM,YADuC,EACvCA,YADuC;MAEvCC,UAFuC,EAEvCA,UAFuC;MAGvCC,aAHuC,EAGvCA,aAHuC;MAIvCH,OAJuC,EAIvCA,OAJuC;MAKvCD,UAAA,EAAAA;IALuC,CAAD,CAAxC;IAAMS,UAAF,GAAAD,SAAA,CAAEC,UAAF;IAAcC,SAAA,GAAAF,SAAA,CAAAE,SAAA;EAQlB,IAAMC,WAAW,GAAGd,UAAU,CAACY,UAAD,EAAaJ,IAAb,EAAmB;IAC/CO,kBAAkB,EAAE;MAClBC,QAAQ,EAAEb;IADQ,CAD2B;IAI/Cc,iBAAiB,EAAE,QAJ4B;IAK/CD,QAAQ,EAAEb;EALqC,CAAnB,CAA9B;EAQA,OAAO;IACLU,SADK,EACLA,SADK;IAELK,WAAW,EAAEJ;EAFR,CAAP;AAID"},"metadata":{},"sourceType":"module","externalDependencies":[]}