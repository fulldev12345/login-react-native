{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState } from \"@react-stately/utils\";\nexport function useCheckboxGroupState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _useControlledState = useControlledState(props.value, props.defaultValue || [], props.onChange),\n    _useControlledState2 = _slicedToArray(_useControlledState, 2),\n    selectedValues = _useControlledState2[0],\n    _setValue = _useControlledState2[1];\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(function (values) {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(function (values) {\n        if (values.includes(value)) {\n          return values.filter(function (existingValue) {\n            return existingValue !== value;\n          });\n        }\n        return values;\n      });\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(function (values) {\n        if (values.includes(value)) {\n          return values.filter(function (existingValue) {\n            return existingValue !== value;\n          });\n        }\n        return values.concat(value);\n      });\n    }\n  };\n  return state;\n}","map":{"version":3,"names":["useCheckboxGroupState","props","_useControlledState","useControlledState","value","defaultValue","onChange","_useControlledState2","_slicedToArray","selectedValues","setValue","state","isReadOnly","isDisabled","isSelected","includes","addValue","values","concat","removeValue","filter","existingValue","toggleValue"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n"],"mappings":";;OA6CO,SAASA,qBAATA,CAA+BC,KAA/B,EAAmF;EAAA,IAApDA,KAAoD;IAApDA,KAAoD,GAAxB,EAAwB;EAAA;EACxF,IAAAC,mBAAA,GAAiCC,kBAAkB,CAACF,KAAK,CAACG,KAAP,EAAcH,KAAK,CAACI,YAAN,IAAsB,EAApC,EAAwCJ,KAAK,CAACK,QAA9C,CAAnD;IAAAC,oBAAA,GAAAC,cAAA,CAAAN,mBAAA;IAAKO,cAAD,GAAAF,oBAAA;IAAiBG,SAAjB,GAAAH,oBAAA;EAEJ,IAAMI,KAAyB,GAAG;IAChCP,KAAK,EAAEK,cADyB;IAEhCC,QAAQ,WAAAA,SAACN,KAAD,EAAQ;MACd,IAAIH,KAAK,CAACW,UAAN,IAAoBX,KAAK,CAACY,UAA9B,EAA0C;QACxC;MACD;MAEDH,SAAQ,CAACN,KAAD,CAAR;IACD,CAR+B;IAShCS,UAAU,EAAEZ,KAAK,CAACY,UAAN,IAAoB,KATA;IAUhCD,UAAU,EAAEX,KAAK,CAACW,UAAN,IAAoB,KAVA;IAWhCE,UAAU,WAAAA,WAACV,KAAD,EAAQ;MAChB,OAAOK,cAAc,CAACM,QAAf,CAAwBX,KAAxB,CAAP;IACD,CAb+B;IAchCY,QAAQ,WAAAA,SAACZ,KAAD,EAAQ;MACd,IAAIH,KAAK,CAACW,UAAN,IAAoBX,KAAK,CAACY,UAA9B,EAA0C;QACxC;MACD;MACDH,SAAQ,CAAC,UAAAO,MAAM,EAAI;QACjB,IAAI,CAACA,MAAM,CAACF,QAAP,CAAgBX,KAAhB,CAAL,EAA6B;UAC3B,OAAOa,MAAM,CAACC,MAAP,CAAcd,KAAd,CAAP;QACD;QACD,OAAOa,MAAP;MACD,CALO,CAAR;IAMD,CAxB+B;IAyBhCE,WAAW,WAAAA,YAACf,KAAD,EAAQ;MACjB,IAAIH,KAAK,CAACW,UAAN,IAAoBX,KAAK,CAACY,UAA9B,EAA0C;QACxC;MACD;MACDH,SAAQ,CAAC,UAAAO,MAAM,EAAI;QACjB,IAAIA,MAAM,CAACF,QAAP,CAAgBX,KAAhB,CAAJ,EAA4B;UAC1B,OAAOa,MAAM,CAACG,MAAP,CAAc,UAAAC,aAAa;YAAA,OAAIA,aAAa,KAAKjB,KAAjD;UAAA,EAAP;QACD;QACD,OAAOa,MAAP;MACD,CALO,CAAR;IAMD,CAnC+B;IAoChCK,WAAW,WAAAA,YAAClB,KAAD,EAAQ;MACjB,IAAIH,KAAK,CAACW,UAAN,IAAoBX,KAAK,CAACY,UAA9B,EAA0C;QACxC;MACD;MACDH,SAAQ,CAAC,UAAAO,MAAM,EAAI;QACjB,IAAIA,MAAM,CAACF,QAAP,CAAgBX,KAAhB,CAAJ,EAA4B;UAC1B,OAAOa,MAAM,CAACG,MAAP,CAAc,UAAAC,aAAa;YAAA,OAAIA,aAAa,KAAKjB,KAAjD;UAAA,EAAP;QACD;QACD,OAAOa,MAAM,CAACC,MAAP,CAAcd,KAAd,CAAP;MACD,CALO,CAAR;IAMD;EA9C+B,CAAlC;EAiDA,OAAOO,KAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}