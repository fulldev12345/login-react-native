{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _Context = require(\"./Context\");\nvar _hooks = require(\"./../color-mode/hooks\");\nvar _hooks2 = require(\"../../hooks\");\nvar _this = this,\n  _jsxFileName = \"/Users/himanshusatija/projects/nativebase-v3/src/core/hybrid-overlay/HybridProvider.tsx\";\nvar HybridProvider = function HybridProvider(_ref) {\n  var children = _ref.children,\n    _ref$options = _ref.options,\n    _ref$options$initialC = _ref$options.initialColorMode,\n    initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n    _ref$options$accessib = _ref$options.accessibleColors,\n    isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n    colorModeManager = _ref.colorModeManager;\n  var _useModeManager = (0, _hooks.useModeManager)(initialColorMode, colorModeManager),\n    colorMode = _useModeManager.colorMode,\n    setColorMode = _useModeManager.setColorMode;\n  var toggleColorMode = _react.default.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n  var _React$useState = _react.default.useState(isTextColorAccessible),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    accessibleColors = _React$useState2[0],\n    setAccessibleColors = _React$useState2[1];\n  _react.default.useEffect(function () {\n    var escapeKeyListener = null;\n    if (_reactNative.Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (_hooks2.keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = _hooks2.keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n    return function () {\n      if (_reactNative.Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return _react.default.createElement(_Context.HybridContext.Provider, {\n    value: {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, children);\n};\nvar _default = HybridProvider;\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_Context","_hooks","_hooks2","HybridProvider","_ref","children","_ref$options","options","_ref$options$initialC","initialColorMode","_ref$options$accessib","accessibleColors","isTextColorAccessible","colorModeManager","_useModeManager","useModeManager","colorMode","setColorMode","toggleColorMode","default","useCallback","_React$useState","useState","_React$useState2","_slicedToArray2","setAccessibleColors","useEffect","escapeKeyListener","Platform","OS","e","key","keyboardDismissHandlerManager","length","lastHandler","pop","document","addEventListener","removeEventListener","createElement","HybridContext","Provider","value","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\core\\hybrid-overlay\\HybridProvider.tsx"],"sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider\n      value={{\n        colorMode: {\n          colorMode,\n          toggleColorMode,\n          setColorMode,\n          accessibleColors,\n          setAccessibleColors,\n        },\n      }}\n    >\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AAEA,IAAAI,OAAA,GAAAJ,OAAA;;;AAEA,IAAMK,cAAc,GAAG,SAAjBA,cAAiBA,CAAAC,IAAA,EAOQ;EAAA,IAN7BC,QAM6B,GAAAD,IAAA,CAN7BC,QAM6B;IAAAC,YAAA,GAAAF,IAAA,CAL7BG,OAK6B;IAAAC,qBAAA,GAAAF,YAAA,CAJ3BG,gBAI2B;IAJ3BA,gBAI2B,GAAAD,qBAAA,cAJR,OAIQ,GAAAA,qBAAA;IAAAE,qBAAA,GAAAJ,YAAA,CAH3BK,gBAG2B;IAHTC,qBAGS,GAAAF,qBAAA,cAHe,KAGf,GAAAA,qBAAA;IAD7BG,gBAC6B,GAAAT,IAAA,CAD7BS,gBAC6B;EAAA,IAAAC,eAAA,GAEO,IAAAb,MAAA,CAAAc,cAAA,EAClCN,gBADkC,EAElCI,gBAFkC,CAFP;IAErBG,SAFqB,GAAAF,eAAA,CAErBE,SAFqB;IAEVC,YAFU,GAAAH,eAAA,CAEVG,YAFU;EAO7B,IAAMC,eAAe,GAAGtB,MAAA,CAAAuB,OAAA,CAAMC,WAAN,CAAkB,YAAM;IAC9CH,YAAY,CAACD,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;EACD,CAFuB,EAErB,CAACA,SAAD,EAAYC,YAAZ,CAFqB,CAAxB;EAP6B,IAAAI,eAAA,GAYmBzB,MAAA,CAAAuB,OAAA,CAAMG,QAAN,CAC9CV,qBAD8C,CAZnB;IAAAW,gBAAA,OAAAC,eAAA,CAAAL,OAAA,EAAAE,eAAA;IAYtBV,gBAZsB,GAAAY,gBAAA;IAYJE,mBAZI,GAAAF,gBAAA;EAgB7B3B,MAAA,CAAAuB,OAAA,CAAMO,SAAN,CAAgB,YAAM;IACpB,IAAIC,iBAAsB,GAAG,IAA7B;IAEA,IAAI5B,YAAA,CAAA6B,QAAA,CAASC,EAAT,KAAgB,KAApB,EAA2B;MACzBF,iBAAiB,GAAG,SAAAA,kBAACG,CAAD,EAAsB;QACxC,IAAIA,CAAC,CAACC,GAAF,KAAU,QAAd,EAAwB;UACtB,IAAI7B,OAAA,CAAA8B,6BAAA,CAA8BC,MAA9B,KAAyC,CAA7C,EAAgD;YAC9C,IAAMC,WAAgB,GAAGhC,OAAA,CAAA8B,6BAAA,CAA8BG,GAA9B,EAAzB;YACAD,WAAW;UACZ;QACF;MACF,CAPD;MAQAE,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCV,iBAArC;IACD;IAED,OAAO,YAAM;MACX,IAAI5B,YAAA,CAAA6B,QAAA,CAASC,EAAT,KAAgB,KAApB,EAA2B;QACzBO,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCX,iBAAxC;MACD;IACF,CAJD;EAKD,CApBD,EAoBG,EApBH;EAsBA,OACE/B,MAAA,CAAAuB,OAAA,CAAAoB,aAAA,CAACvC,QAAA,CAAAwC,aAAD,CAAeC,QAAf;IACEC,KAAK,EAAE;MACL1B,SAAS,EAAE;QACTA,SAAS,EAATA,SADS;QAETE,eAAe,EAAfA,eAFS;QAGTD,YAAY,EAAZA,YAHS;QAITN,gBAAgB,EAAhBA,gBAJS;QAKTc,mBAAmB,EAAnBA;MALS;IADN,CADT;IAAAkB,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAWG5C,QAXH,CADF;AAeD,CA5DD;eA8DeF,c"},"metadata":{},"sourceType":"script","externalDependencies":[]}