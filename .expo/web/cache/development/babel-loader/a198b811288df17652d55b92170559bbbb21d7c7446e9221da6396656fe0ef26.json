{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractProps = extractProps;\nexports.mergeUnderscoreProps = mergeUnderscoreProps;\nexports.calculateProps = calculateProps;\nexports.resolveValueWithBreakpoint = exports.extractPropertyFromFunction = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\nvar _lodash2 = _interopRequireDefault(require(\"lodash.isnil\"));\nvar _lodash3 = _interopRequireDefault(require(\"lodash.mergewith\"));\nvar _lodash4 = _interopRequireDefault(require(\"lodash.clonedeep\"));\nvar _base = require(\"./../../theme/base\");\nvar _tools = require(\"./../../theme/tools\");\nvar _useContrastText = require(\"../useContrastText\");\nfunction extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint) {\n  var newProps = {};\n  for (var property in props) {\n    if (_base.themePropertyMap[property]) {\n      var propValues = extractPropertyFromFunction(property, props, theme, componentTheme);\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!(0, _lodash2.default)(propValues)) {\n        for (var nestedProp in propValues) {\n          newProps[nestedProp] = (0, _lodash.default)(theme, _base.themePropertyMap[nestedProp] + \".\" + propValues[nestedProp], propValues[nestedProp]);\n        }\n      } else if (property === 'shadow') {\n        var shadowProps = theme[_base.themePropertyMap[property]](colorModeProps)[props[property]];\n        if (!(0, _lodash2.default)(shadowProps)) {\n          newProps = (0, _extends2.default)({}, newProps, shadowProps);\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(props[property], currentBreakpoint, property);\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(props[property], currentBreakpoint, property);\n    }\n  }\n  return (0, _lodash4.default)(newProps);\n}\nfunction filterDefaultProps(props, defaultProps) {\n  var _extractInObject = (0, _tools.extractInObject)(defaultProps, Object.keys(props)),\n    _extractInObject2 = (0, _slicedToArray2.default)(_extractInObject, 2),\n    resultProps = _extractInObject2[1];\n  return resultProps;\n}\nvar extractPropertyFromFunction = function extractPropertyFromFunction(property, props, theme, componentTheme) {\n  var propValues;\n  if (componentTheme && typeof componentTheme[_base.themePropertyMap[property]] === 'function') {\n    var funcProps = componentTheme[_base.themePropertyMap[property]]((0, _extends2.default)({\n      theme: theme\n    }, props));\n    var isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    propValues = isNested ? (0, _extends2.default)({}, (0, _lodash.default)(funcProps, \"\" + props[property])) : (0, _extends2.default)({}, funcProps);\n  } else {\n    propValues = (0, _lodash.default)(componentTheme, _base.themePropertyMap[property] + \".\" + props[property]);\n  }\n  return propValues;\n};\nexports.extractPropertyFromFunction = extractPropertyFromFunction;\nfunction mergeUnderscoreProps(newProps, props) {\n  var _props = Object.keys(newProps).filter(function (propName) {\n    return propName.startsWith('_');\n  });\n  _props.forEach(function (propName) {\n    var _newProps$bg, _newProps$propName$co, _newProps$propName, _props$propName;\n    var bg = (_newProps$bg = newProps.bg) != null ? _newProps$bg : newProps.backgroundColor;\n    var textColor = bg ? {\n      color: (0, _useContrastText.useContrastText)(bg, (_newProps$propName$co = (_newProps$propName = newProps[propName]) == null ? void 0 : _newProps$propName.color) != null ? _newProps$propName$co : (_props$propName = props[propName]) == null ? void 0 : _props$propName.color)\n    } : {};\n    newProps[propName] = (0, _extends2.default)({}, textColor, newProps[propName], props[propName]);\n  });\n  return newProps;\n}\nvar resolveValueWithBreakpoint = function resolveValueWithBreakpoint(values, currentBreakpoint, property) {\n  if ((0, _tools.hasValidBreakpointFormat)(values, property)) {\n    return (0, _tools.findLastValidBreakpoint)(values, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\nexports.resolveValueWithBreakpoint = resolveValueWithBreakpoint;\nfunction calculateProps(theme, colorModeProps, componentTheme, props, windowWidth) {\n  var currentBreakpoint = (0, _tools.getClosestBreakpoint)(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n  var newProps;\n  if (componentTheme) {\n    newProps = extractProps(filterDefaultProps(props, componentTheme.defaultProps), theme, colorModeProps, componentTheme, currentBreakpoint);\n    var componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle((0, _extends2.default)({\n      theme: theme\n    }, newProps, props, colorModeProps));\n    newProps = (0, _lodash3.default)(newProps, componentBaseStyle, function (objValue, srcValue, key) {\n      if (!(0, _lodash2.default)(objValue)) {\n        delete newProps[key];\n      }\n    });\n    var variant = props.variant || (0, _lodash.default)(componentTheme, 'defaultProps.variant');\n    if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n      var colorScheme = props.colorScheme || (0, _lodash.default)(componentTheme, 'defaultProps.colorScheme');\n      var variantProps = componentTheme.variants[variant]((0, _extends2.default)({}, props, newProps, {\n        colorScheme: colorScheme,\n        theme: theme\n      }, colorModeProps));\n      variantProps = extractProps(variantProps, theme, colorModeProps, componentTheme, currentBreakpoint);\n      newProps = (0, _lodash3.default)(newProps, variantProps, function (objValue, srcValue, key) {\n        if (!(0, _lodash2.default)(objValue)) {\n          delete newProps[key];\n        }\n      });\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  var extractedProps = extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint);\n  newProps = (0, _lodash3.default)(newProps, extractedProps, function (objValue, srcValue, key) {\n    if (!(0, _lodash2.default)(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}","map":{"version":3,"names":["_lodash","_interopRequireDefault","require","_lodash2","_lodash3","_lodash4","_base","_tools","_useContrastText","extractProps","props","theme","colorModeProps","componentTheme","currentBreakpoint","newProps","property","themePropertyMap","propValues","extractPropertyFromFunction","default","nestedProp","shadowProps","_extends2","resolveValueWithBreakpoint","filterDefaultProps","defaultProps","_extractInObject","extractInObject","Object","keys","_extractInObject2","_slicedToArray2","resultProps","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","_newProps$bg","_newProps$propName$co","_newProps$propName","_props$propName","bg","backgroundColor","textColor","color","useContrastText","values","hasValidBreakpointFormat","findLastValidBreakpoint","calculateProps","windowWidth","getClosestBreakpoint","breakpoints","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\hooks\\useThemeProps\\utils.ts"],"sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          props[property]\n        ];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}