{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nvar UNINTIALIZED_STATE = {};\nexport default function useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n  var _React$useState = React.useState(stateRef.current),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    trackingState = _React$useState2[0],\n    setTrackingState = _React$useState2[1];\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n    setTrackingState(stateRef.current);\n  }, []);\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","_React$useState","useState","_React$useState2","_slicedToArray","trackingState","setTrackingState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-navigation\\core\\lib\\module\\useSyncState.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,kBAAkB,GAAG,EAA3B;AAKA,eAAe,SAASC,YAATA,CAAyBC,YAAzB,EAAuD;EACpE,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAgBJ,kBAAhB,CAAjB;EACA,IAAMK,eAAe,GAAGN,KAAK,CAACK,MAAN,CAAa,KAAb,CAAxB;EACA,IAAME,YAAY,GAAGP,KAAK,CAACK,MAAN,CAAa,IAAb,CAArB;EAEAL,KAAK,CAACQ,SAAN,CAAgB,YAAM;IACpBD,YAAY,CAACE,OAAb,GAAuB,IAAvB;IAEA,OAAO,YAAM;MACXF,YAAY,CAACE,OAAb,GAAuB,KAAvB;IACD,CAFD;EAGD,CAND,EAMG,EANH;EAQA,IAAIL,QAAQ,CAACK,OAAT,KAAqBR,kBAAzB,EAA6C;IAC3CG,QAAQ,CAACK,OAAT,GAEE,OAAON,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAFxD;EAGD;EAED,IAAAO,eAAA,GAA0CV,KAAK,CAACW,QAAN,CAAeP,QAAQ,CAACK,OAAxB,CAA1C;IAAAG,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAOI,aAAD,GAAAF,gBAAA;IAAgBG,gBAAhB,GAAAH,gBAAA;EAEN,IAAMI,QAAQ,GAAGhB,KAAK,CAACiB,WAAN,CAAkB;IAAA,OAAMb,QAAQ,CAACK,OAAjC;EAAA,GAA0C,EAA1C,CAAjB;EAEA,IAAMS,QAAQ,GAAGlB,KAAK,CAACiB,WAAN,CAAmB,UAAAE,KAAD,EAAc;IAC/C,IAAIA,KAAK,KAAKf,QAAQ,CAACK,OAAnB,IAA8B,CAACF,YAAY,CAACE,OAAhD,EAAyD;MACvD;IACD;IAEDL,QAAQ,CAACK,OAAT,GAAmBU,KAAnB;IAEA,IAAI,CAACb,eAAe,CAACG,OAArB,EAA8B;MAC5BM,gBAAgB,CAACI,KAAD,CAAhB;IACD;EACF,CAVgB,EAUd,EAVc,CAAjB;EAYA,IAAMC,cAAc,GAAGpB,KAAK,CAACiB,WAAN,CAAmB,UAAAI,QAAD,EAA0B;IACjEf,eAAe,CAACG,OAAhB,GAA0B,IAA1B;IAEA,IAAI;MACFY,QAAQ;IACT,CAFD,SAEU;MACRf,eAAe,CAACG,OAAhB,GAA0B,KAA1B;IACD;EACF,CARsB,EAQpB,EARoB,CAAvB;EAUA,IAAMa,YAAY,GAAGtB,KAAK,CAACiB,WAAN,CAAkB,YAAM;IAC3C,IAAI,CAACV,YAAY,CAACE,OAAlB,EAA2B;MACzB;IACD;IAIDM,gBAAgB,CAACX,QAAQ,CAACK,OAAV,CAAhB;EACD,CARoB,EAQlB,EARkB,CAArB;EAYA,IAAIK,aAAa,KAAKV,QAAQ,CAACK,OAA/B,EAAwC;IACtCM,gBAAgB,CAACX,QAAQ,CAACK,OAAV,CAAhB;EACD;EAED,IAAMU,KAAK,GAAGf,QAAQ,CAACK,OAAvB;EAEAT,KAAK,CAACuB,aAAN,CAAoBJ,KAApB;EAEA,OAAO,CAACA,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}