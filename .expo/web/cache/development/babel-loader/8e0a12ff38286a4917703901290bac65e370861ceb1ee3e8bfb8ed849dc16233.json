{"ast":null,"code":"import { useToggleState } from \"@react-stately/toggle\";\nimport { useLabel } from \"@react-aria/label\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useToggle } from \"@react-aria/toggle\";\nimport { useEffect } from \"react\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nexport function useCheckbox(props, state, inputRef) {\n  var _useToggle = useToggle(props, state, inputRef),\n    inputProps = _useToggle.inputProps;\n  var isSelected = state.isSelected;\n  var isIndeterminate = props.isIndeterminate;\n  useEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n  return {\n    inputProps: _babelRuntimeHelpersEsmExtends({}, inputProps, {\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    })\n  };\n}\nvar $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames = new WeakMap();\nexport function useCheckboxGroup(props, state) {\n  var isDisabled = props.isDisabled,\n    name = props.name;\n  var _useLabel = useLabel(_babelRuntimeHelpersEsmExtends({}, props, {\n      labelElementType: 'span'\n    })),\n    labelProps = _useLabel.labelProps,\n    fieldProps = _useLabel.fieldProps;\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames.set(state, name);\n  return {\n    groupProps: mergeProps(domProps, _babelRuntimeHelpersEsmExtends({\n      role: 'group',\n      'aria-disabled': isDisabled || undefined\n    }, fieldProps)),\n    labelProps: labelProps\n  };\n}\nexport function useCheckboxGroupItem(props, state, inputRef) {\n  var toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange: function onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n  var _useCheckbox = useCheckbox(_babelRuntimeHelpersEsmExtends({}, props, {\n      isReadOnly: props.isReadOnly || state.isReadOnly,\n      isDisabled: props.isDisabled || state.isDisabled,\n      name: props.name || $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames.get(state)\n    }), toggleState, inputRef),\n    inputProps = _useCheckbox.inputProps;\n  return {\n    inputProps: inputProps\n  };\n}","map":{"version":3,"names":["useCheckbox","props","state","inputRef","_useToggle","useToggle","inputProps","isSelected","isIndeterminate","useEffect","current","indeterminate","_babelRuntimeHelpersEsmExtends","checked","$c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames","WeakMap","useCheckboxGroup","isDisabled","name","_useLabel","useLabel","labelElementType","labelProps","fieldProps","domProps","filterDOMProps","labelable","set","groupProps","mergeProps","role","undefined","useCheckboxGroupItem","toggleState","useToggleState","isReadOnly","value","onChange","addValue","removeValue","_useCheckbox","get"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckbox.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\utils.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckboxGroup.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckboxGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"],"mappings":";;;;;;OA8BO,SAASA,WAATA,CAAqBC,KAArB,EAA+CC,KAA/C,EAAmEC,QAAnE,EAAwH;EAC7H,IAAAC,UAAA,GAAmBC,SAAS,CAACJ,KAAD,EAAQC,KAAR,EAAeC,QAAf,CAA5B;IAAKG,UAAA,GAAAF,UAAA,CAAAE,UAAA;EACL,IAAKC,UAAA,GAAcL,KAAnB,CAAKK,UAAA;EAEL,IAAKC,eAAA,GAAmBP,KAAxB,CAAKO,eAAA;EACLC,SAAS,CAAC,YAAM;IAGd,IAAIN,QAAQ,CAACO,OAAb,EAAsB;MACpBP,QAAQ,CAACO,OAAT,CAAiBC,aAAjB,GAAiCH,eAAjC;IACD;EACF,CANQ,CAAT;EAQA,OAAO;IACLF,UAAU,EAAAM,8BAAA,KACLN,UADK;MAERO,OAAO,EAAEN,UAFD;MAGR,gBAAgBC,eAAe,GAAG,OAAH,GAAaD;IAHpC;EADL,CAAP;AAOD;ACpCM,IAAMO,0DAAkB,GAAG,IAAIC,OAAJ,EAA3B;OCkBA,SAASC,gBAATA,CAA0Bf,KAA1B,EAAyDC,KAAzD,EAAuG;EAC5G,IAAKe,UAAD,GAAqBhB,KAAzB,CAAKgB,UAAD;IAAaC,IAAA,GAAQjB,KAAzB,CAAiBiB,IAAA;EAEjB,IAAAC,SAAA,GAA+BC,QAAQ,CAAAR,8BAAA,KAClCX,KADkC;MAIrCoB,gBAAgB,EAAE;IAJmB,GAAvC;IAAKC,UAAD,GAAAH,SAAA,CAACG,UAAD;IAAaC,UAAA,GAAAJ,SAAA,CAAAI,UAAA;EAOjB,IAAIC,QAAQ,GAAGC,cAAc,CAACxB,KAAD,EAAQ;IAACyB,SAAS,EAAE;EAAZ,CAAR,CAA7B;EAGAZ,0DAAA,CAAmBa,GAAnB,CAAuBzB,KAAvB,EAA8BgB,IAA9B;EAEA,OAAO;IACLU,UAAU,EAAEC,UAAU,CAACL,QAAD,EAAAZ,8BAAA;MACpBkB,IAAI,EAAE,OADc;MAEpB,iBAAiBb,UAAU,IAAIc;IAFX,GAGjBR,UAHiB,EADjB;IAMLD,UAAA,EAAAA;EANK,CAAP;AAQD;OC7BM,SAASU,oBAATA,CAA8B/B,KAA9B,EAAiEC,KAAjE,EAA4FC,QAA5F,EAAiJ;EACtJ,IAAM8B,WAAW,GAAGC,cAAc,CAAC;IACjCC,UAAU,EAAElC,KAAK,CAACkC,UAAN,IAAoBjC,KAAK,CAACiC,UADL;IAEjC5B,UAAU,EAAEL,KAAK,CAACK,UAAN,CAAiBN,KAAK,CAACmC,KAAvB,CAFqB;IAGjCC,QAAQ,WAAAA,SAAC9B,UAAD,EAAa;MACnB,IAAIA,UAAJ,EAAgB;QACdL,KAAK,CAACoC,QAAN,CAAerC,KAAK,CAACmC,KAArB;MACD,CAFD,MAEO;QACLlC,KAAK,CAACqC,WAAN,CAAkBtC,KAAK,CAACmC,KAAxB;MACD;MAED,IAAInC,KAAK,CAACoC,QAAV,EAAoB;QAClBpC,KAAK,CAACoC,QAAN,CAAe9B,UAAf;MACD;IACF;EAbgC,CAAD,CAAlC;EAgBA,IAAAiC,YAAA,GAAmBxC,WAAA,CAAAY,8BAAA,KACdX,KADc;MAEjBkC,UAAU,EAAElC,KAAK,CAACkC,UAAN,IAAoBjC,KAAK,CAACiC,UAFrB;MAGjBlB,UAAU,EAAEhB,KAAK,CAACgB,UAAN,IAAoBf,KAAK,CAACe,UAHrB;MAIjBC,IAAI,EAAEjB,KAAK,CAACiB,IAAN,IAAcJ,0DAAA,CAAmB2B,GAAnB,CAAuBvC,KAAvB;IAJH,IAKhB+B,WALgB,EAKH9B,QALG,CAAnB;IAAKG,UAAA,GAAAkC,YAAA,CAAAlC,UAAA;EAOL,OAAO;IAACA,UAAA,EAAAA;EAAD,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}