{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _primitives = require(\"../../primitives\");\nvar _useThemeProps2 = require(\"../../../hooks/useThemeProps\");\nvar _this = this,\n  _jsxFileName = \"/Users/himanshusatija/projects/nativebase-v3/src/components/composites/SimpleGrid/SimpleGrid.tsx\";\nvar DEBUG_STYLES = false ? {\n  rows: {\n    border: '1px solid black'\n  },\n  cols: {\n    border: '1px solid red'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\nvar SimpleGrid = function SimpleGrid(props, ref) {\n  var _useThemeProps = (0, _useThemeProps2.useThemeProps)('SimpleGrid', props),\n    columns = _useThemeProps.columns,\n    space = _useThemeProps.space,\n    spacingX = _useThemeProps.spacingX,\n    spacingY = _useThemeProps.spacingY,\n    minChildWidth = _useThemeProps.minChildWidth,\n    children = _useThemeProps.children,\n    remainingProps = (0, _objectWithoutProperties2.default)(_useThemeProps, [\"columns\", \"space\", \"spacingX\", \"spacingY\", \"minChildWidth\", \"children\"]);\n  var cellSpacing = space != null ? space : 0;\n  var cellSpacingX = spacingX != null ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY != null ? spacingY : cellSpacing;\n  var childrenArray = _react.default.Children.toArray(children);\n  if (columns) {\n    var rowSlices = [];\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n    return _react.default.createElement(_primitives.VStack, (0, _extends2.default)({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }), rowSlices.map(function (row, rowIndex) {\n      return _react.default.createElement(_primitives.HStack, {\n        space: cellSpacingX,\n        key: rowIndex,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, row.map(function (col) {\n        return _react.default.createElement(_primitives.Box, (0, _extends2.default)({}, DEBUG_STYLES.cols, {\n          key: col.key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }\n        }), col);\n      }));\n    }));\n  } else if (minChildWidth) {\n    return _react.default.createElement(_primitives.Box, (0, _extends2.default)({\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\"\n    }, remainingProps, {\n      ref: ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }), childrenArray.map(function (col) {\n      return _react.default.createElement(_primitives.Box, (0, _extends2.default)({}, DEBUG_STYLES.cols, {\n        mx: cellSpacingX,\n        my: cellSpacingY,\n        key: col.key,\n        minWidth: minChildWidth,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }), col);\n    }));\n  }\n  return _react.default.createElement(_react.default.Fragment, null);\n};\nvar _default = _react.default.memo(_react.default.forwardRef(SimpleGrid));\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_primitives","_useThemeProps2","DEBUG_STYLES","rows","border","cols","SimpleGrid","props","ref","_useThemeProps","useThemeProps","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","_objectWithoutProperties2","default","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","Children","toArray","rowSlices","i","length","push","slice","createElement","VStack","_extends2","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","HStack","key","col","Box","flexDirection","flexWrap","justifyContent","mx","my","minWidth","Fragment","memo","forwardRef"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\components\\composites\\SimpleGrid\\SimpleGrid.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        border: '1px solid black',\n      },\n      cols: {\n        border: '1px solid red',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}