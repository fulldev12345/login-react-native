{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenReaderEnabled = useScreenReaderEnabled;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nfunction useScreenReaderEnabled() {\n  var _React$useState = _react.default.useState(false),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    enabled = _React$useState2[0],\n    setEnabled = _React$useState2[1];\n  var mountedRef = _react.default.useRef(false);\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n  _react.default.useEffect(function () {\n    mountedRef.current = true;\n    function setInitialValue() {\n      var res;\n      return _regenerator.default.async(function setInitialValue$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(_reactNative.AccessibilityInfo.isScreenReaderEnabled());\n            case 2:\n              res = _context.sent;\n              handleSetEnabled(res);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n    var handler = _reactNative.AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      _reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","useScreenReaderEnabled","_React$useState","default","useState","_React$useState2","_slicedToArray2","enabled","setEnabled","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","res","_regenerator","async","setInitialValue$","_context","prev","next","awrap","AccessibilityInfo","isScreenReaderEnabled","sent","stop","Promise","handler","addEventListener","event","removeEventListener"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\hooks\\useScreenReaderEnabled.ts"],"sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAEO,SAASE,sBAATA,CAAA,EAAkC;EAAA,IAAAC,eAAA,GACTL,MAAA,CAAAM,OAAA,CAAMC,QAAN,CAAe,KAAf,CADS;IAAAC,gBAAA,OAAAC,eAAA,CAAAH,OAAA,EAAAD,eAAA;IAChCK,OADgC,GAAAF,gBAAA;IACvBG,UADuB,GAAAH,gBAAA;EAEvC,IAAMI,UAAU,GAAGZ,MAAA,CAAAM,OAAA,CAAMO,MAAN,CAAa,KAAb,CAAnB;EAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmBA,CAACC,KAAD,EAAoB;IAC3C,IAAIH,UAAU,CAACI,OAAf,EAAwB;MACtBL,UAAU,CAACI,KAAD,CAAV;IACD;EACF,CAJD;EAMAf,MAAA,CAAAM,OAAA,CAAMW,SAAN,CAAgB,YAAM;IACpBL,UAAU,CAACI,OAAX,GAAqB,IAArB;IACA,SAAeE,eAAfA,CAAA;MAAA,IAAAC,GAAA;MAAA,OAAAC,YAAA,CAAAd,OAAA,CAAAe,KAAA,UAAAC,iBAAAC,QAAA;QAAA;UAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAAAL,YAAA,CAAAd,OAAA,CAAAoB,KAAA,CACoBvB,YAAA,CAAAwB,iBAAA,CAAkBC,qBAAlB,EADpB;YAAA;cACQT,GADR,GAAAI,QAAA,CAAAM,IAAA;cAEEf,gBAAgB,CAACK,GAAD,CAAhB;YAFF;YAAA;cAAA,OAAAI,QAAA,CAAAO,IAAA;UAAA;QAAA;MAAA,qBAAAC,OAAA;IAAA;IAKA,IAAIC,OAAY,GAAG7B,YAAA,CAAAwB,iBAAA,CAAkBM,gBAAlB,CACjB,qBADiB,EAEjB,UAACC,KAAD,EAAgB;MACdpB,gBAAgB,CAACoB,KAAD,CAAhB;IACD,CAJgB,CAAnB;IAOAhB,eAAe;IACf,OAAO,YAAM;MACXN,UAAU,CAACI,OAAX,GAAqB,KAArB;MACAb,YAAA,CAAAwB,iBAAA,CAAkBQ,mBAAlB,CAAsC,qBAAtC,EAA6DH,OAA7D;IACD,CAHD;EAID,CAnBD;EAqBA,OAAOtB,OAAP;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}