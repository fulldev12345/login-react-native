{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"borderless\", \"pressColor\", \"style\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    _ref$pressColor = _ref.pressColor,\n    pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n    style = _ref.style,\n    children = _ref.children,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: TouchableNativeFeedback.Ripple(pressColor, borderless)\n    }), React.createElement(View, {\n      style: style\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(TouchableOpacity, _extends({\n      style: style\n    }, rest), children);\n  }\n}","map":{"version":3,"names":["React","Platform","TouchableNativeFeedback","TouchableOpacity","View","ANDROID_VERSION_LOLLIPOP","TouchableItem","_ref","_ref$borderless","borderless","_ref$pressColor","pressColor","style","children","rest","_objectWithoutProperties","_excluded","OS","Version","createElement","_extends","useForeground","canUseNativeForeground","background","Ripple","Children","only"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\TouchableItem.tsx"],"sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,QAAA;AAAA,OAAAC,uBAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAkBA,IAAMC,wBAAwB,GAAG,EAAjC;AAEA,eAAe,SAASC,aAATA,CAAAC,IAAA,EAML;EAAA,IAAAC,eAAA,GAAAD,IAAA,CALRE,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KADuB,GAAAA,eAAA;IAAAE,eAAA,GAAAH,IAAA,CAEpCI,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,oBAFuB,GAAAA,eAAA;IAGpCE,KAHoC,GAAAL,IAAA,CAGpCK,KAHoC;IAIpCC,QAJoC,GAAAN,IAAA,CAIpCM,QAJoC;IAKjCC,IAAA,GAAAC,wBAAA,CAAAR,IAAA,EAAAS,SAAA;EAUH,IACEf,QAAQ,CAACgB,EAAT,KAAgB,SAAhB,IACAhB,QAAQ,CAACiB,OAAT,IAAoBb,wBAFtB,EAGE;IACA,OACEL,KAAA,CAAAmB,aAAA,CAACjB,uBAAD,EAAAkB,QAAA,KACMN,IADN;MAEEO,aAAa,EAAEnB,uBAAuB,CAACoB,sBAAxB,EAFjB;MAGEC,UAAU,EAAErB,uBAAuB,CAACsB,MAAxB,CAA+Bb,UAA/B,EAA2CF,UAA3C;IAHd,IAKET,KAAA,CAAAmB,aAAA,CAACf,IAAD;MAAMQ,KAAK,EAAEA;IAAb,GAAqBZ,KAAK,CAACyB,QAAN,CAAeC,IAAf,CAAoBb,QAApB,CAArB,CALF,CADF;EASD,CAbD,MAaO;IACL,OACEb,KAAA,CAAAmB,aAAA,CAAChB,gBAAD,EAAAiB,QAAA;MAAkBR,KAAK,EAAEA;IAAzB,GAAoCE,IAApC,GACGD,QADH,CADF;EAKD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}