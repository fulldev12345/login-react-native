{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { useControlledState } from \"@react-stately/utils\";\nimport { useMemo, useRef, useState } from \"react\";\nvar $c91e86e24f2dc9a2182dcc2674c58c$export$Selection = function (_Set) {\n  _inherits($c91e86e24f2dc9a2182dcc2674c58c$export$Selection, _Set);\n  var _super = _createSuper($c91e86e24f2dc9a2182dcc2674c58c$export$Selection);\n  function $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(keys, anchorKey, currentKey) {\n    var _this;\n    _classCallCheck(this, $c91e86e24f2dc9a2182dcc2674c58c$export$Selection);\n    _this = _super.call(this, keys);\n    _this.anchorKey = void 0;\n    _this.currentKey = void 0;\n    if (keys instanceof $c91e86e24f2dc9a2182dcc2674c58c$export$Selection) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n    return _this;\n  }\n  return $c91e86e24f2dc9a2182dcc2674c58c$export$Selection;\n}(_wrapNativeSuper(Set));\nexport function useMultipleSelectionState(props) {\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n    disallowEmptySelection = props.disallowEmptySelection;\n  var isFocusedRef = useRef(false);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    _setFocused = _useState2[1];\n  var focusedKeyRef = useRef(null);\n  var childFocusStrategyRef = useRef(null);\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    _setFocusedKey = _useState4[1];\n  var selectedKeysProp = useMemo(function () {\n    return $c86d35e876e048ac11515eee40c7$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = useMemo(function () {\n    return $c86d35e876e048ac11515eee40c7$var$convertSelection(props.defaultSelectedKeys, new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection());\n  }, [props.defaultSelectedKeys]);\n  var _useControlledState = useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n    _useControlledState2 = _slicedToArray(_useControlledState, 2),\n    selectedKeys = _useControlledState2[0],\n    setSelectedKeys = _useControlledState2[1];\n  var disabledKeysProp = useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n      _setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey: function setFocusedKey(k, childFocusStrategy) {\n      if (childFocusStrategy === void 0) {\n        childFocusStrategy = 'first';\n      }\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: setSelectedKeys,\n    disabledKeys: disabledKeysProp\n  };\n}\nfunction $c86d35e876e048ac11515eee40c7$var$convertSelection(selection, defaultValue) {\n  if (!selection) {\n    return defaultValue;\n  }\n  return selection === 'all' ? 'all' : new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(selection);\n}\nexport var SelectionManager = function () {\n  function SelectionManager(collection, state, options) {\n    _classCallCheck(this, SelectionManager);\n    var _options$allowsCellSe;\n    this.collection = void 0;\n    this.state = void 0;\n    this.allowsCellSelection = void 0;\n    this._isSelectAll = void 0;\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = (_options$allowsCellSe = options == null ? void 0 : options.allowsCellSelection) != null ? _options$allowsCellSe : false;\n    this._isSelectAll = null;\n  }\n  _createClass(SelectionManager, [{\n    key: \"selectionMode\",\n    get: function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === 'none') {\n        return false;\n      }\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? !this.state.disabledKeys.has(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) {\n        return false;\n      }\n      if (this.state.selectedKeys === 'all') {\n        return true;\n      }\n      if (this._isSelectAll != null) {\n        return this._isSelectAll;\n      }\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var _first;\n      var first = null;\n      for (var _iterator = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step; !(_step = _iterator()).done;) {\n        var key = _step.value;\n        var item = this.collection.getItem(key);\n        if (!first || (item == null ? void 0 : item.index) < first.index) {\n          first = item;\n        }\n      }\n      return (_first = first) == null ? void 0 : _first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var _last;\n      var last = null;\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step2; !(_step2 = _iterator2()).done;) {\n        var key = _step2.value;\n        var item = this.collection.getItem(key);\n        if (!last || (item == null ? void 0 : item.index) > last.index) {\n          last = item;\n        }\n      }\n      return (_last = last) == null ? void 0 : _last.key;\n    }\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === 'all') {\n        selection = new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection([toKey], toKey, toKey);\n      } else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(selectedKeys, anchorKey, toKey);\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)), _step3; !(_step3 = _iterator3()).done;) {\n          var key = _step3.value;\n          selection.delete(key);\n        }\n        for (var _iterator4 = _createForOfIteratorHelperLoose(this.getKeyRange(toKey, anchorKey)), _step4; !(_step4 = _iterator4()).done;) {\n          var _key = _step4.value;\n          if (!this.state.disabledKeys.has(_key)) {\n            selection.add(_key);\n          }\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) {\n          return this.getKeyRangeInternal(from, to);\n        }\n        return this.getKeyRangeInternal(to, from);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) {\n          keys.push(key);\n        }\n        if (key === to) {\n          return keys;\n        }\n        key = this.collection.getKeyAfter(key);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) {\n        return key;\n      }\n      if (item.type === 'cell' && this.allowsCellSelection) {\n        return key;\n      }\n      while (item.type !== 'item' && item.parentKey) {\n        item = this.collection.getItem(item.parentKey);\n      }\n      if (!item || item.type !== 'item') {\n        return null;\n      }\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      key = this.getKey(key);\n      if (key == null) {\n        return;\n      }\n      var keys = new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) {\n        keys.delete(key);\n      } else {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) {\n        return;\n      }\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      key = this.getKey(key);\n      if (key == null) {\n        return;\n      }\n      this.state.setSelectedKeys(new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection([key], key, key));\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') {\n        return;\n      }\n      var selection = new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection();\n      for (var _iterator5 = _createForOfIteratorHelperLoose(keys), _step5; !(_step5 = _iterator5()).done;) {\n        var key = _step5.value;\n        key = this.getKey(key);\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === 'single') {\n            break;\n          }\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n      var keys = [];\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (!_this2.state.disabledKeys.has(key)) {\n            var item = _this2.collection.getItem(key);\n            if (item.type === 'item') {\n              keys.push(key);\n            }\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) {\n              addKeys(_toConsumableArray(item.childNodes)[0].key);\n            }\n          }\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === 'multiple') {\n        this.state.setSelectedKeys('all');\n      }\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n        this.state.setSelectedKeys(new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection());\n      }\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) {\n        this.clearSelection();\n      } else {\n        this.selectAll();\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') {\n        return;\n      }\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) {\n          this.toggleSelection(key);\n        } else {\n          this.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        this.extendSelection(key);\n      } else {\n        this.toggleSelection(key);\n      }\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) {\n        return true;\n      }\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) {\n        return false;\n      }\n      for (var _iterator6 = _createForOfIteratorHelperLoose(selection), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n        if (!selectedKeys.has(key)) {\n          return false;\n        }\n      }\n      for (var _iterator7 = _createForOfIteratorHelperLoose(selectedKeys), _step7; !(_step7 = _iterator7()).done;) {\n        var _key2 = _step7.value;\n        if (!selection.has(_key2)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }]);\n  return SelectionManager;\n}();","map":{"version":3,"names":["$c91e86e24f2dc9a2182dcc2674c58c$export$Selection","_Set","_inherits","_super","_createSuper","keys","anchorKey","currentKey","_this","_classCallCheck","call","_wrapNativeSuper","Set","useMultipleSelectionState","props","_props$selectionMode","selectionMode","disallowEmptySelection","isFocusedRef","useRef","_useState","useState","_useState2","_slicedToArray","setFocused","focusedKeyRef","childFocusStrategyRef","_useState3","_useState4","setFocusedKey","selectedKeysProp","useMemo","$c86d35e876e048ac11515eee40c7$var$convertSelection","selectedKeys","defaultSelectedKeys","_useControlledState","useControlledState","onSelectionChange","_useControlledState2","setSelectedKeys","disabledKeysProp","disabledKeys","isFocused","current","f","focusedKey","childFocusStrategy","k","convertSelection","selection","defaultValue","SelectionManager","collection","state","options","_options$allowsCellSe","allowsCellSelection","_isSelectAll","_createClass","key","get","value","getSelectAllKeys","isSelected","getKey","has","size","isEmpty","allKeys","every","_first","first","_iterator","_createForOfIteratorHelperLoose","_step","done","item","getItem","index","_last","last","_iterator2","_step2","extendSelection","toKey","_iterator3","getKeyRange","_step3","delete","_iterator4","_step4","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","toggleSelection","replaceSelection","_iterator5","_step5","_this2","addKeys","hasChildNodes","_toConsumableArray","childNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","isSelectAll","select","e","shiftKey","isSelectionEqual","_iterator6","_step6","_iterator7","_step7"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\Selection.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\useMultipleSelectionState.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useRef, useState} from 'react';\nimport {MultipleSelection, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelection): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys,\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, Selection as ISelection, Node, PressEvent, SelectionMode} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? !this.state.disabledKeys.has(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (!this.state.disabledKeys.has(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new Selection([key], key, key));\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (!this.state.disabledKeys.has(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (e && e.shiftKey) {\n      this.extendSelection(key);\n    } else {\n      this.toggleSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}