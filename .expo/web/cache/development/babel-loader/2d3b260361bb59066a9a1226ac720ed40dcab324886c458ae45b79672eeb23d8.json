{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMenuTypeahead = exports.useMenuOptionItem = exports.useMenuItem = exports.useMenu = exports.useMenuTrigger = void 0;\nvar _focus = require(\"@react-aria/focus\");\nvar _utils = require(\"@react-aria/utils\");\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar useMenuTrigger = function useMenuTrigger(_ref) {\n  var handleOpen = _ref.handleOpen,\n    isOpen = _ref.isOpen;\n  var menuTriggerId = (0, _utils.useId)();\n  return {\n    'onKeyDownCapture': function onKeyDownCapture(event) {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\nexports.useMenuTrigger = useMenuTrigger;\nvar useMenu = function useMenu() {\n  var focusManager = (0, _focus.useFocusManager)();\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\nexports.useMenu = useMenu;\nvar useMenuItem = function useMenuItem(_ref2) {\n  var textValue = _ref2.textValue,\n    ref = _ref2.ref;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && _reactNative.Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexports.useMenuItem = useMenuItem;\nvar useMenuOptionItem = function useMenuOptionItem(_ref3) {\n  var isChecked = _ref3.isChecked,\n    type = _ref3.type;\n  return {\n    accessibilityRole: 'menuitem' + (_reactNative.Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nexports.useMenuOptionItem = useMenuOptionItem;\nvar ITEM_ATTR = 'data-nativebase-menu-item';\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) != null ? _element$getAttribute : '';\n};\nvar useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\" + ITEM_ATTR + \"]\")).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\" + ITEM_ATTR + \"=\\\"\" + foundValue + \"\\\"]\");\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};\nexports.useMenuTypeahead = useMenuTypeahead;","map":{"version":3,"names":["_focus","require","_utils","_reactNative","useMenuTrigger","_ref","handleOpen","isOpen","menuTriggerId","useId","onKeyDownCapture","event","includes","key","preventDefault","undefined","useMenu","focusManager","useFocusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","_ref2","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","Platform","OS","focus","useMenuOptionItem","_ref3","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","_element$getAttribute","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\components\\composites\\Menu\\useMenu.tsx"],"sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  let focusManager = useFocusManager();\n  let onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}