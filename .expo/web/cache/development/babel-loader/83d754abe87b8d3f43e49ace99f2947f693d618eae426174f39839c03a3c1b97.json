{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\nvar _useTheme2 = require(\"./useTheme\");\nfunction useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n    _props$fontStyle = props.fontStyle,\n    fontStyle = _props$fontStyle === void 0 ? 'normal' : _props$fontStyle,\n    _props$fontWeight = props.fontWeight,\n    fontWeight = _props$fontWeight === void 0 ? 400 : _props$fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n  var _useTheme = (0, _useTheme2.useTheme)(),\n    fontConfig = _useTheme.fontConfig,\n    fontWeights = _useTheme.fontWeights,\n    fonts = _useTheme.fonts;\n  if (fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"names":["_useTheme2","require","useResolvedFontFamily","props","fontFamily","_props$fontStyle","fontStyle","_props$fontWeight","fontWeight","newFontFamily","newFontStyle","newFontWeight","_useTheme","useTheme","fontConfig","fontWeights","fonts","fontToken","undefined","fontWeightNumber","fontVariant"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\hooks\\useResolvedFontFamily.ts"],"sourcesContent":["import { useTheme } from './useTheme';\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: string;\n  fontStyle?: string;\n  fontWeight?: string | number;\n}) {\n  const { fontFamily, fontStyle = 'normal', fontWeight = 400 } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontFamily && fontFamily in fonts) {\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"],"mappings":";;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAWO,SAASC,qBAATA,CAA+BC,KAA/B,EAIJ;EAAA,IACOC,UADP,GAC8DD,KAD9D,CACOC,UADP;IAAAC,gBAAA,GAC8DF,KAD9D,CACmBG,SADnB;IACmBA,SADnB,GAAAD,gBAAA,cAC+B,QAD/B,GAAAA,gBAAA;IAAAE,iBAAA,GAC8DJ,KAD9D,CACyCK,UADzC;IACyCA,UADzC,GAAAD,iBAAA,cACsD,GADtD,GAAAA,iBAAA;EAED,IAAIE,aAAa,GAAGL,UAApB;EACA,IAAIM,YAAY,GAAGJ,SAAnB;EACA,IAAIK,aAAa,GAAGH,UAApB;EAJC,IAAAI,SAAA,GAM0C,IAAAZ,UAAA,CAAAa,QAAA,GAN1C;IAMOC,UANP,GAAAF,SAAA,CAMOE,UANP;IAMmBC,WANnB,GAAAH,SAAA,CAMmBG,WANnB;IAMgCC,KANhC,GAAAJ,SAAA,CAMgCI,KANhC;EAOD,IAAIZ,UAAU,IAAIA,UAAU,IAAIY,KAAhC,EAAuC;IACrC,IAAMC,SAAS,GAAGD,KAAK,CAACZ,UAAD,CAAvB;IAEA,IAAIU,UAAU,IAAIA,UAAU,CAACG,SAAD,CAA5B,EAAyC;MAKvCN,aAAa,GAAGO,SAAhB;MAEAR,YAAY,GAAGQ,SAAf;MAEA,IAAIC,gBAAgB,GAClBX,UAAU,IAAIO,WAAd,GAA4BA,WAAW,CAACP,UAAD,CAAvC,GAAsDA,UADxD;MAEA,IAAIY,WAAW,GAAGN,UAAU,CAACG,SAAD,CAAV,CAAsBE,gBAAtB,CAAlB;MAEA,IAAI,OAAOC,WAAP,KAAuB,QAA3B,EAAqC;QACnC,IAAIA,WAAW,CAACd,SAAD,CAAf,EAA4BG,aAAa,GAAGW,WAAW,CAACd,SAAD,CAA3B;MAC7B,CAFD,MAEO;QACLG,aAAa,GAAGW,WAAhB;MACD;IACF,CAlBD,MAkBO;MACLX,aAAa,GAAGO,KAAK,CAACZ,UAAD,CAArB;IACD;EACF;EAED,OAAO;IACLA,UAAU,EAAEK,aADP;IAELD,UAAU,EAAEG,aAFP;IAGLL,SAAS,EAAEI;EAHN,CAAP;AAKD"},"metadata":{},"sourceType":"script","externalDependencies":[]}