{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nimport { useLabel } from \"@react-aria/label\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nexport function useTextField(props, ref) {\n  var _props$inputElementTy = props.inputElementType,\n    inputElementType = _props$inputElementTy === void 0 ? 'input' : _props$inputElementTy,\n    _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$isRequired = props.isRequired,\n    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    validationState = props.validationState,\n    _props$type = props.type,\n    type = _props$type === void 0 ? 'text' : _props$type,\n    _props$onChange = props.onChange,\n    _onChange = _props$onChange === void 0 ? function () {} : _props$onChange;\n  var _useFocusable = useFocusable(props, ref),\n    focusableProps = _useFocusable.focusableProps;\n  var _useLabel = useLabel(props),\n    labelProps = _useLabel.labelProps,\n    fieldProps = _useLabel.fieldProps;\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  var inputOnlyProps = {\n    type: type,\n    pattern: props.pattern\n  };\n  return {\n    labelProps: labelProps,\n    inputProps: mergeProps(domProps, inputElementType === 'input' && inputOnlyProps, _babelRuntimeHelpersEsmExtends({\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-activedescendant': props['aria-activedescendant'],\n      'aria-autocomplete': props['aria-autocomplete'],\n      'aria-haspopup': props['aria-haspopup'],\n      value: props.value,\n      defaultValue: props.value ? undefined : props.defaultValue,\n      onChange: function onChange(e) {\n        return _onChange(e.target.value);\n      },\n      autoComplete: props.autoComplete,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      onSelect: props.onSelect,\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput\n    }, focusableProps, fieldProps))\n  };\n}\nfunction $c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' && window.InputEvent && typeof InputEvent.prototype.getTargetRanges === 'function';\n}\nexport function useFormattedTextField(props, state, inputRef) {\n  var stateRef = useRef(state);\n  stateRef.current = state;\n  useEffect(function () {\n    if (!$c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent()) {\n      return;\n    }\n    var input = inputRef.current;\n    var onBeforeInput = function onBeforeInput(e) {\n      var state = stateRef.current;\n      var nextValue;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return function () {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n  var onBeforeInput = !$c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent() ? function (e) {\n    var nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);\n    if (!state.validate(nextValue)) {\n      e.preventDefault();\n    }\n  } : null;\n  var _useTextField = useTextField(props, inputRef),\n    labelProps = _useTextField.labelProps,\n    textFieldProps = _useTextField.inputProps;\n  var compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(textFieldProps, {\n      onBeforeInput: onBeforeInput,\n      onCompositionStart: function onCompositionStart() {\n        var _inputRef$current = inputRef.current,\n          value = _inputRef$current.value,\n          selectionStart = _inputRef$current.selectionStart,\n          selectionEnd = _inputRef$current.selectionEnd;\n        compositionStartState.current = {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        };\n      },\n      onCompositionEnd: function onCompositionEnd() {\n        if (!state.validate(inputRef.current.value)) {\n          var _compositionStartStat = compositionStartState.current,\n            value = _compositionStartStat.value,\n            selectionStart = _compositionStartStat.selectionStart,\n            selectionEnd = _compositionStartStat.selectionEnd;\n          inputRef.current.value = value;\n          inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          state.setInputValue(value);\n        }\n      }\n    }),\n    labelProps: labelProps\n  };\n}","map":{"version":3,"names":["useTextField","props","ref","_props$inputElementTy","inputElementType","_props$isDisabled","isDisabled","_props$isRequired","isRequired","_props$isReadOnly","isReadOnly","validationState","_props$type","type","_props$onChange","onChange","_onChange","_useFocusable","useFocusable","focusableProps","_useLabel","useLabel","labelProps","fieldProps","domProps","filterDOMProps","labelable","inputOnlyProps","pattern","inputProps","mergeProps","_babelRuntimeHelpersEsmExtends","disabled","readOnly","undefined","value","defaultValue","e","target","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput","$c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent","supportsNativeBeforeInputEvent","window","InputEvent","prototype","getTargetRanges","useFormattedTextField","state","inputRef","stateRef","useRef","current","useEffect","input","nextValue","inputType","slice","selectionStart","selectionEnd","data","validate","preventDefault","addEventListener","removeEventListener","_useTextField","textFieldProps","compositionStartState","_inputRef$current","_compositionStartStat","setSelectionRange","setInputValue"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useTextField.ts","E:\\Login-UI-UX-React-Native\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject, TextareaHTMLAttributes} from 'react';\nimport {ElementType} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {useLabel} from '@react-aria/label';\n\nexport interface TextFieldAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>\n}\n\ninterface AriaTextFieldOptions extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: ElementType\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField(\n  props: AriaTextFieldOptions,\n  ref: RefObject<HTMLInputElement | HTMLTextAreaElement>\n): TextFieldAria {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  } = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps} = useLabel(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    )\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}