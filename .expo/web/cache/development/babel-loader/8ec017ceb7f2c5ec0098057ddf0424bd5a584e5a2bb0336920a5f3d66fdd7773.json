{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"emit\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n    getState = _ref.getState,\n    navigation = _ref.navigation,\n    _setOptions = _ref.setOptions,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n        rest = _objectWithoutProperties(navigation, _excluded);\n      var dispatch = function dispatch(action) {\n        var payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? _objectSpread({\n          source: route.key\n        }, payload) : payload);\n      };\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          return dispatch(actions[name].apply(actions, arguments));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: dispatch,\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"names":["React","CommonActions","useNavigationCache","_ref","state","getState","navigation","setOptions","router","emitter","cache","useMemo","current","actions","_objectSpread","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","_objectWithoutProperties","_excluded","dispatch","action","payload","source","helpers","Object","keys","name","apply","arguments","create","options","o","_defineProperty","isFocused","index"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationCache.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}