{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBackHandler = useBackHandler;\nexports.useKeyboardDismissable = exports.keyboardDismissHandlerManager = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar keyboardDismissHandlers = [];\nvar keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexports.keyboardDismissHandlerManager = keyboardDismissHandlerManager;\nvar useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  var enabled = _ref.enabled,\n    callback = _ref.callback;\n  _react.default.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\nexports.useKeyboardDismissable = useKeyboardDismissable;\nfunction useBackHandler(_ref2) {\n  var enabled = _ref2.enabled,\n    callback = _ref2.callback;\n  (0, _react.useEffect)(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return function () {\n      return _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    };\n  }, [enabled, callback]);\n}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","_ref","enabled","callback","default","useEffect","cleanupFn","useBackHandler","_ref2","backHandler","BackHandler","addEventListener","removeEventListener"],"sources":["E:\\Login-UI-UX-React-Native\\node_modules\\native-base\\lib\\commonjs\\hooks\\useKeyboardDismissable.ts"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AAEA,IAAAC,YAAA,GAAAD,OAAA;AAOA,IAAIE,uBAAyC,GAAG,EAAhD;AACO,IAAMC,6BAA6B,GAAG;EAC3CC,IAAI,EAAE,SAAAA,KAACC,OAAD,EAAwB;IAC5BH,uBAAuB,CAACE,IAAxB,CAA6BC,OAA7B;IACA,OAAO,YAAM;MACXH,uBAAuB,GAAGA,uBAAuB,CAACI,MAAxB,CACxB,UAACC,CAAD;QAAA,OAAOA,CAAC,KAAKF,OAAb;MAAA,CADwB,CAA1B;IAGD,CAJD;EAKD,CAR0C;EAS3CG,MAAM,EAAE,SAAAA,OAAA;IAAA,OAAMN,uBAAuB,CAACM,MAA9B;EAAA,CATmC;EAU3CC,GAAG,EAAE,SAAAA,IAAA,EAAM;IACT,OAAOP,uBAAuB,CAACO,GAAxB,EAAP;EACD;AAZ0C,CAAtC;;AAkBA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyBA,CAAAC,IAAA,EAAoC;EAAA,IAAjCC,OAAiC,GAAAD,IAAA,CAAjCC,OAAiC;IAAxBC,QAAwB,GAAAF,IAAA,CAAxBE,QAAwB;EACxEf,MAAA,CAAAgB,OAAA,CAAMC,SAAN,CAAgB,YAAM;IACpB,IAAIC,SAAS,GAAG,SAAAA,UAAA,EAAM,CAAE,CAAxB;IACA,IAAIJ,OAAJ,EAAa;MACXI,SAAS,GAAGb,6BAA6B,CAACC,IAA9B,CAAmCS,QAAnC,CAAZ;IACD,CAFD,MAEO;MACLG,SAAS;IACV;IACD,OAAO,YAAM;MACXA,SAAS;IACV,CAFD;EAGD,CAVD,EAUG,CAACJ,OAAD,EAAUC,QAAV,CAVH;EAYAI,cAAc,CAAC;IAAEL,OAAO,EAAPA,OAAF;IAAWC,QAAQ,EAARA;EAAX,CAAD,CAAd;AACD,CAdM;;AAgBA,SAASI,cAATA,CAAAC,KAAA,EAAwD;EAAA,IAA9BN,OAA8B,GAAAM,KAAA,CAA9BN,OAA8B;IAArBC,QAAqB,GAAAK,KAAA,CAArBL,QAAqB;EAC7D,IAAAf,MAAA,CAAAiB,SAAA,EAAU,YAAM;IACd,IAAII,WAAW,GAAG,SAAdA,WAAcA,CAAA,EAAM;MACtBN,QAAQ;MACR,OAAO,IAAP;IACD,CAHD;IAIA,IAAID,OAAJ,EAAa;MACXX,YAAA,CAAAmB,WAAA,CAAYC,gBAAZ,CAA6B,mBAA7B,EAAkDF,WAAlD;IACD,CAFD,MAEO;MACLlB,YAAA,CAAAmB,WAAA,CAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDH,WAArD;IACD;IACD,OAAO;MAAA,OACLlB,YAAA,CAAAmB,WAAA,CAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDH,WAArD,CADK;IAAA,CAAP;EAED,CAZD,EAYG,CAACP,OAAD,EAAUC,QAAV,CAZH;AAaD"},"metadata":{},"sourceType":"script","externalDependencies":[]}